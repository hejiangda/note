@@name printf 重定向

#ifdef __GNUC__
/* With GCC/RAISONANCE, small printf (option LD Linker->Libraries->Small printf
   set to 'Yes') calls __io_putchar() */
#define PUTCHAR_PROTOTYPE int __io_putchar(int ch)
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif /* __GNUC__ */


/**
  * @brief  Retargets the C library printf function to the USART.
  * @param  None
  * @retval None
  */
PUTCHAR_PROTOTYPE
{
  /* Place your implementation of fputc here */
  /* e.g. write a character to the USART1 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, 0xFFFF);

  return ch;
}
@@end

@@name cmsisrtos 线程创建
//声明定义
osThreadId xxxHandle;//创建句柄

static void xxx(void const *argument);//线程函数
//os init 函数中
osThreadDef(THREAD_1,xxx,osPriorityNormal, 0,configMINIMAL_STACK_SIZE);//自定线程名，线程实际函数，os优先级，实例，栈大小
xxxHandle = osThreadCreate(osThread(THREAD_1),NULL);//创建线程

@@end

@@name cmsisrtos 常用线程函数

osStatus osThreadSuspend (osThreadId thread_id)//Suspend execution of a thread.
osStatus osThreadResume (osThreadId thread_id)//Resume execution of a suspended thread.


@@end

@@name hal_spi

HAL_SPI_Transmit(&hspi1,&Cbyte,1,0xFFFFFF);
@@end

